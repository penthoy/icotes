# This workflow builds and deploys Docker images when a new version is detected
# Required secrets: DOCKER_USERNAME, DOCKER_PASSWORD
# Required token: GITHUB_TOKEN (automatically provided)

name: Docker Build and Deploy
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_BUILDKIT: 1

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-build: ${{ steps.version-check.outputs.should-build }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version from package.json
      id: version
      run: |
        VERSION=$(jq -r .version package.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Current version: $VERSION"
    - name: Check if version is new
      id: version-check
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "🔍 Checking if version v${VERSION} already exists..."
        
        # Fetch all tags to ensure we have the latest
        git fetch --tags origin || echo "Warning: Could not fetch tags"
        
        # List all tags for debugging
        echo "📋 Current tags:"
        git tag -l | head -10 || echo "No tags found"
        
        # Check if this version tag already exists
        if git tag -l | grep -q "^v${VERSION}$"; then
          echo "🏷️  Version v${VERSION} already exists as a tag"
          echo "should-build=false" >> $GITHUB_OUTPUT
        else
          echo "✨ New version detected: v${VERSION}"
          echo "should-build=true" >> $GITHUB_OUTPUT
        fi

  docker-build:
    needs: check-version
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: needs.check-version.outputs.should-build == 'true' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    concurrency:
      group: docker-release-${{ needs.check-version.outputs.version }}
      cancel-in-progress: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Docker Hub secrets
      run: |
        if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
          echo "❌ Docker Hub credentials not available. Skipping Docker operations."
          echo "Please set DOCKER_USERNAME and DOCKER_PASSWORD secrets in the repository settings."
          exit 1
        fi
        echo "✅ Docker Hub credentials are available"
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: false
        
    - name: Verify Docker setup
      run: |
        echo "🔍 Verifying Docker setup..."
        docker --version
        docker info
        echo "🔐 Verifying Docker Hub login..."
        docker run --rm hello-world
        echo "✅ Docker setup verified"
        
    - name: Extract version
      id: version
      run: |
        VERSION="${{ needs.check-version.outputs.version }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Building version: $VERSION"
        
    - name: Make build scripts executable
      run: |
        chmod +x build/build-docker.sh
        chmod +x build/build-saas-docker.sh
        
    - name: Build and push main Docker image
      run: |
        cd build
        echo "🔨 Starting Docker build for main image..."
        echo "📁 Current directory: $(pwd)"
        echo "📋 Files in build directory:"
        ls -la
        echo "🔍 Checking if build script exists and is executable:"
        ls -la build-docker.sh
        echo "🚀 Executing build script..."
        ./build-docker.sh ${{ steps.version.outputs.version }}
        
    - name: Build and push SaaS Docker image  
      run: |
        cd build
        echo "🔨 Starting Docker build for SaaS image..."
        echo "📁 Current directory: $(pwd)"
        echo "🔍 Checking if SaaS build script exists and is executable:"
        ls -la build-saas-docker.sh
        echo "🚀 Executing SaaS build script..."
        ./build-saas-docker.sh ${{ steps.version.outputs.version }}
        
    - name: Create version tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${VERSION}" -m "Release version ${VERSION}"
        git push origin "v${VERSION}"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          🐳 Docker Images Released:
          - `penthoy/icotes:${{ steps.version.outputs.version }}`
          - `penthoy/icotes:latest`
          - `penthoy/icotes_saas:${{ steps.version.outputs.version }}`
          - `penthoy/icotes_saas:latest`
          
          ## Usage
          
          **Standalone Mode:**
          ```bash
          docker run -p 8000:8000 penthoy/icotes:${{ steps.version.outputs.version }}
          ```
          
          **SaaS Mode:**
          ```bash
          docker run -p 8000:8000 \
            -e AUTH_MODE=saas \
            -e SUPABASE_JWT_SECRET=your-secret-key \
            -e UNAUTH_REDIRECT_URL=https://icotes.com \
            penthoy/icotes_saas:${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false

  notify:
    needs: [check-version, docker-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify build result
      run: |
        if [ "${{ needs.check-version.outputs.should-build }}" == "false" ]; then
          echo "⏭️  Skipped build - Version ${{ needs.check-version.outputs.version }} already exists"
        elif [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "✅ Successfully built and deployed version ${{ needs.check-version.outputs.version }}"
        else
          echo "❌ Build failed for version ${{ needs.check-version.outputs.version }}"
          exit 1
        fi
