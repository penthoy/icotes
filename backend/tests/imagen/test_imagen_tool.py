import os
import base64
from types import SimpleNamespace
from pathlib import Path
import asyncio
import pytest

from icpy.agent.tools.imagen_tool import ImagenTool

from PIL import Image
import io


def make_png_bytes(size=(640, 480), color=(0, 128, 255)) -> bytes:
    img = Image.new('RGB', size, color)
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    return buf.getvalue()


class DummyInline:
    def __init__(self, data: bytes, mime: str = 'image/png'):
        self.data = data
        self.mime_type = mime


class DummyPart:
    def __init__(self, inline: DummyInline):
        self.inline_data = inline


class DummyResp:
    def __init__(self, parts):
        self.parts = parts


class DummyModel:
    def __init__(self, model_name: str):
        self.model_name = model_name
    def generate_content(self, content):
        # Always return a valid image as bytes via inline_data
        return DummyResp([DummyPart(DummyInline(make_png_bytes()))])


@pytest.mark.asyncio
async def test_generate_image_defaults_square(monkeypatch, tmp_path):
    # Ensure workspace is isolated
    os.environ['WORKSPACE_ROOT'] = str(tmp_path)

    # Mock Google SDK model
    import google.generativeai as genai
    monkeypatch.setattr(genai, 'GenerativeModel', DummyModel)

    # Mock context helpers
    async def fake_get_current_context():
        return {'contextId': 'local'}
    async def fake_get_contextual_filesystem():
        # Provide a FS with the methods used in _save_image_to_workspace
        class FS:
            async def write_file(self, path, content):
                return True
            async def delete_file(self, path):
                return True
        return FS()

    import icpy.agent.tools.imagen_tool as mod
    monkeypatch.setattr(mod, 'get_current_context', fake_get_current_context)
    monkeypatch.setattr(mod, 'get_contextual_filesystem', fake_get_contextual_filesystem)

    tool = ImagenTool()
    res = await tool.execute(prompt="sunset over mountains")

    assert res.success is True
    data = res.data
    # Should include reference and urls
    assert 'imageReference' in data
    assert 'fullImageUrl' in data and data['fullImageUrl'].startswith('/api/media/image/')
    assert 'imageUrl' in data and data['imageUrl'].startswith('file://')

    # Because no size hints and text-to-image, our default is 1024x1024
    assert data.get('width') == 1024
    assert data.get('height') == 1024
    # And resizedTo indicates exact size
    assert data.get('resizedTo') == '1024x1024'

    # File should exist in workspace
    file_path = data.get('filePath')
    assert file_path, 'filePath missing'
    assert (tmp_path / file_path).exists()


@pytest.mark.asyncio
async def test_edit_image_preserve_size_when_no_hints(monkeypatch, tmp_path):
    # Prepare input image saved to disk
    input_bytes = make_png_bytes(size=(320, 200))
    input_path = tmp_path / 'input.png'
    with open(input_path, 'wb') as f:
        f.write(input_bytes)

    os.environ['WORKSPACE_ROOT'] = str(tmp_path)

    # Model returns a new image but we won't resize since no width/height/aspect_ratio
    import google.generativeai as genai
    monkeypatch.setattr(genai, 'GenerativeModel', DummyModel)

    async def fake_get_current_context():
        return {'contextId': 'local'}

    async def fake_get_contextual_filesystem():
        class FS:
            async def read_file_binary(self, path):
                with open(path, 'rb') as f:
                    return f.read()
            async def write_file(self, path, content):
                return True
            async def delete_file(self, path):
                return True
        return FS()

    import icpy.agent.tools.imagen_tool as mod
    monkeypatch.setattr(mod, 'get_current_context', fake_get_current_context)
    monkeypatch.setattr(mod, 'get_contextual_filesystem', fake_get_contextual_filesystem)

    tool = ImagenTool()
    res = await tool.execute(
        prompt="increase contrast",
        image_data=f"file://{input_path}",
        mode='auto'
    )

    assert res.success is True
    data = res.data
    # In edit mode with no width/height/aspect_ratio we preserve original generated bytes size
    # Our DummyModel generates 640x480; since no resize hints, those should be reported
    assert data.get('width') == 640
    assert data.get('height') == 480
    assert 'resizedTo' not in data

    # The tool should indicate edit mode detected
    assert data.get('mode') == 'edit'

    # Thumbnail and full image URLs present
    assert data.get('thumbnailUrl') and data.get('fullImageUrl')
